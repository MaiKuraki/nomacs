# Searches for Qt with the required components
macro(NMC_FINDQT)
  # unsetting all QT variables manually (when switching from Qt4 to Qt5 in the gui)
  unset(QT_ARTHURPLUGIN_PLUGIN_DEBUG CACHE)
  unset(QT_ARTHURPLUGIN_PLUGIN_RELEASE CACHE)
  unset(QT_BINARY_DIR CACHE)
  unset(QT_CONTAINEREXTENSION_PLUGIN_DEBUG CACHE)
  unset(QT_CONTAINEREXTENSION_PLUGIN_RELEASE CACHE)
  unset(QT_CUSTOMWIDGETPLUGIN_PLUGIN_DEBUG CACHE)
  unset(QT_CUSTOMWIDGETPLUGIN_PLUGIN_RELEASE CACHE)
  unset(QT_DBUSCPP2XML_EXECUTABLE CACHE)
  unset(QT_DBUSXML2CPP_EXECUTABLE CACHE)
  unset(QT_DESIGNER_EXECUTABLE CACHE)
  unset(QT_DLL_PATH_tmp CACHE)
  unset(QT_DOC_DIR CACHE)
  unset(QT_HEADERS_DIR CACHE)
  unset(QT_IMPORTS_DIR CACHE)
  unset(QT_INCLUDES CACHE)
  unset(QT_LIBRARIES CACHE)
  unset(QT_LIBRARY_DIR CACHE)
  unset(QT_LINGUIST_EXECUTABLE CACHE)
  unset(QT_LRELEASE_EXECUTABLE CACHE)
  unset(QT_LUPDATE_EXECUTABLE CACHE)
  unset(QT_MKSPECS_DIR CACHE)
  unset(QT_MOC_EXECUTABLE CACHE)
  unset(QT_PHONONWIDGETS_PLUGIN_DEBUG CACHE)
  unset(QT_PHONONWIDGETS_PLUGIN_RELEASE CACHE)
  unset(QT_PHONON_DS9_PLUGIN_DEBUG CACHE)
  unset(QT_PHONON_DS9_PLUGIN_RELEASE CACHE)
  unset(QT_PHONON_INCLUDE_DIR CACHE)
  unset(QT_PHONON_LIBRARY CACHE)
  unset(QT_PHONON_LIBRARY_DEBUG CACHE)
  unset(QT_PHONON_LIBRARY_RELEASE CACHE)
  unset(QT_PLUGINS_DIR CACHE)
  unset(QT_QAXCONTAINER_INCLUDE_DIR CACHE)
  unset(QT_QAXCONTAINER_LIBRARY CACHE)
  unset(QT_QAXCONTAINER_LIBRARY_DEBUG CACHE)
  unset(QT_QAXCONTAINER_LIBRARY_RELEASE CACHE)
  unset(QT_QAXSERVER_INCLUDE_DIR CACHE)
  unset(QT_QAXSERVER_LIBRARY CACHE)
  unset(QT_QAXSERVER_LIBRARY_DEBUG CACHE)
  unset(QT_QAXSERVER_LIBRARY_RELEASE CACHE)
  unset(QT_QCNCODECS_PLUGIN_DEBUG CACHE)
  unset(QT_QCNCODECS_PLUGIN_RELEASE CACHE)
  unset(QT_QCOLLECTIONGENERATOR_EXECUTABLE CACHE)
  unset(QT_QCOREWLANBEARER_PLUGIN_DEBUG CACHE)
  unset(QT_QCOREWLANBEARER_PLUGIN_RELEASE CACHE)
  unset(QT_QDECLARATIVEVIEW_PLUGIN_DEBUG CACHE)
  unset(QT_QDECLARATIVEVIEW_PLUGIN_RELEASE CACHE)
  unset(QT_QDECORATIONDEFAULT_PLUGIN_DEBUG CACHE)
  unset(QT_QDECORATIONDEFAULT_PLUGIN_RELEASE CACHE)
  unset(QT_QDECORATIONWINDOWS_PLUGIN_DEBUG CACHE)
  unset(QT_QDECORATIONWINDOWS_PLUGIN_RELEASE CACHE)
  unset(QT_QGENERICBEARER_PLUGIN_DEBUG CACHE)
  unset(QT_QGENERICBEARER_PLUGIN_RELEASE CACHE)
  unset(QT_QGIF_PLUGIN_DEBUG CACHE)
  unset(QT_QGIF_PLUGIN_RELEASE CACHE)
  unset(QT_QGLGRAPHICSSYSTEM_PLUGIN_DEBUG CACHE)
  unset(QT_QGLGRAPHICSSYSTEM_PLUGIN_RELEASE CACHE)
  unset(QT_QICO_PLUGIN_DEBUG CACHE)
  unset(QT_QICO_PLUGIN_RELEASE CACHE)
  unset(QT_QIMSW_MULTI_PLUGIN_DEBUG CACHE)
  unset(QT_QIMSW_MULTI_PLUGIN_RELEASE CACHE)
  unset(QT_QJPCODECS_PLUGIN_DEBUG CACHE)
  unset(QT_QJPCODECS_PLUGIN_RELEASE CACHE)
  unset(QT_QJPEG_PLUGIN_DEBUG CACHE)
  unset(QT_QJPEG_PLUGIN_RELEASE CACHE)
  unset(QT_QKRCODECS_PLUGIN_DEBUG CACHE)
  unset(QT_QKRCODECS_PLUGIN_RELEASE CACHE)
  #unset(QT_QMAKE_EXECUTABLE CACHE)
  unset(QT_QMAKE_EXECUTABLE_LAST CACHE)
  unset(QT_QMAKE_PATH CACHE)
  unset(QT_QMNG_PLUGIN_DEBUG CACHE)
  unset(QT_QMNG_PLUGIN_RELEASE CACHE)
  unset(QT_QNATIVEWIFIBEARER_PLUGIN_DEBUG CACHE)
  unset(QT_QNATIVEWIFIBEARER_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLDB2_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLDB2_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLIBASE_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLIBASE_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLITE2_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLITE2_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLITE_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLITE_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLMYSQL_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLMYSQL_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLOCI_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLOCI_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLODBC_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLODBC_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLPSQL_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLPSQL_PLUGIN_RELEASE CACHE)
  unset(QT_QSQLTDS_PLUGIN_DEBUG CACHE)
  unset(QT_QSQLTDS_PLUGIN_RELEASE CACHE)
  unset(QT_QSVGICON_PLUGIN_DEBUG CACHE)
  unset(QT_QSVGICON_PLUGIN_RELEASE CACHE)
  unset(QT_QSVG_PLUGIN_DEBUG CACHE)
  unset(QT_QSVG_PLUGIN_RELEASE CACHE)
  unset(QT_QT3SUPPORTWIDGETS_PLUGIN_DEBUG CACHE)
  unset(QT_QT3SUPPORTWIDGETS_PLUGIN_RELEASE CACHE)
  unset(QT_QT3SUPPORT_INCLUDE_DIR CACHE)
  unset(QT_QT3SUPPORT_LIBRARY CACHE)
  unset(QT_QT3SUPPORT_LIBRARY_DEBUG CACHE)
  unset(QT_QT3SUPPORT_LIBRARY_RELEASE CACHE)
  unset(QT_QTACCESSIBLECOMPATWIDGETS_PLUGIN_DEBUG CACHE)
  unset(QT_QTACCESSIBLECOMPATWIDGETS_PLUGIN_RELEASE CACHE)
  unset(QT_QTACCESSIBLEWIDGETS_PLUGIN_DEBUG CACHE)
  unset(QT_QTACCESSIBLEWIDGETS_PLUGIN_RELEASE CACHE)
  unset(QT_QTASSISTANTCLIENT_INCLUDE_DIR CACHE)
  unset(QT_QTASSISTANTCLIENT_LIBRARY CACHE)
  unset(QT_QTASSISTANTCLIENT_LIBRARY_DEBUG CACHE)
  unset(QT_QTASSISTANTCLIENT_LIBRARY_RELEASE CACHE)
  unset(QT_QTASSISTANT_INCLUDE_DIR CACHE)
  unset(QT_QTASSISTANT_LIBRARY CACHE)
  unset(QT_QTASSISTANT_LIBRARY_DEBUG CACHE)
  unset(QT_QTASSISTANT_LIBRARY_RELEASE CACHE)
  unset(QT_QTCLUCENE_LIBRARY CACHE)
  unset(QT_QTCLUCENE_LIBRARY_DEBUG CACHE)
  unset(QT_QTCLUCENE_LIBRARY_RELEASE CACHE)
  unset(QT_QTCORE_INCLUDE_DIR CACHE)
  unset(QT_QTCORE_LIBRARY_DEBUG CACHE)
  unset(QT_QTCORE_LIBRARY_RELEASE CACHE)
  unset(QT_QTDBUS_INCLUDE_DIR CACHE)
  unset(QT_QTDBUS_LIBRARY CACHE)
  unset(QT_QTDBUS_LIBRARY_DEBUG CACHE)
  unset(QT_QTDBUS_LIBRARY_RELEASE CACHE)
  unset(QT_QTDECLARATIVE_INCLUDE_DIR CACHE)
  unset(QT_QTDECLARATIVE_LIBRARY CACHE)
  unset(QT_QTDECLARATIVE_LIBRARY_DEBUG CACHE)
  unset(QT_QTDECLARATIVE_LIBRARY_RELEASE CACHE)
  unset(QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR CACHE)
  unset(QT_QTDESIGNERCOMPONENTS_LIBRARY CACHE)
  unset(QT_QTDESIGNERCOMPONENTS_LIBRARY_DEBUG CACHE)
  unset(QT_QTDESIGNERCOMPONENTS_LIBRARY_RELEASE CACHE)
  unset(QT_QTDESIGNER_INCLUDE_DIR CACHE)
  unset(QT_QTDESIGNER_LIBRARY CACHE)
  unset(QT_QTDESIGNER_LIBRARY_DEBUG CACHE)
  unset(QT_QTDESIGNER_LIBRARY_RELEASE CACHE)
  unset(QT_QTGA_PLUGIN_DEBUG CACHE)
  unset(QT_QTGA_PLUGIN_RELEASE CACHE)
  unset(QT_QTGUI_INCLUDE_DIR CACHE)
  unset(QT_QTGUI_LIBRARY_DEBUG CACHE)
  unset(QT_QTGUI_LIBRARY_RELEASE CACHE)
  unset(QT_QTHELP_INCLUDE_DIR CACHE)
  unset(QT_QTHELP_LIBRARY CACHE)
  unset(QT_QTHELP_LIBRARY_DEBUG CACHE)
  unset(QT_QTHELP_LIBRARY_RELEASE CACHE)
  unset(QT_QTIFF_PLUGIN_DEBUG CACHE)
  unset(QT_QTIFF_PLUGIN_RELEASE CACHE)
  unset(QT_QTMAIN_LIBRARY_DEBUG CACHE)
  unset(QT_QTMAIN_LIBRARY_RELEASE CACHE)
  unset(QT_QTMULTIMEDIA_INCLUDE_DIR CACHE)
  unset(QT_QTMULTIMEDIA_LIBRARY CACHE)
  unset(QT_QTMULTIMEDIA_LIBRARY_DEBUG CACHE)
  unset(QT_QTMULTIMEDIA_LIBRARY_RELEASE CACHE)
  unset(QT_QTNETWORK_INCLUDE_DIR CACHE)
  unset(QT_QTNETWORK_LIBRARY_DEBUG CACHE)
  unset(QT_QTNETWORK_LIBRARY_RELEASE CACHE)
  unset(QT_QTNSPLUGIN_INCLUDE_DIR CACHE)
  unset(QT_QTNSPLUGIN_LIBRARY CACHE)
  unset(QT_QTNSPLUGIN_LIBRARY_DEBUG CACHE)
  unset(QT_QTNSPLUGIN_LIBRARY_RELEASE CACHE)
  unset(QT_QTOPENGL_INCLUDE_DIR CACHE)
  unset(QT_QTOPENGL_LIBRARY CACHE)
  unset(QT_QTOPENGL_LIBRARY_DEBUG CACHE)
  unset(QT_QTOPENGL_LIBRARY_RELEASE CACHE)
  unset(QT_QTRACEGRAPHICSSYSTEM_PLUGIN_DEBUG CACHE)
  unset(QT_QTRACEGRAPHICSSYSTEM_PLUGIN_RELEASE CACHE)
  unset(QT_QTSCRIPTDBUS_PLUGIN_DEBUG CACHE)
  unset(QT_QTSCRIPTDBUS_PLUGIN_RELEASE CACHE)
  unset(QT_QTSCRIPTTOOLS_INCLUDE_DIR CACHE)
  unset(QT_QTSCRIPTTOOLS_LIBRARY CACHE)
  unset(QT_QTSCRIPTTOOLS_LIBRARY_DEBUG CACHE)
  unset(QT_QTSCRIPTTOOLS_LIBRARY_RELEASE CACHE)
  unset(QT_QTSCRIPT_INCLUDE_DIR CACHE)
  unset(QT_QTSCRIPT_LIBRARY CACHE)
  unset(QT_QTSCRIPT_LIBRARY_DEBUG CACHE)
  unset(QT_QTSCRIPT_LIBRARY_RELEASE CACHE)
  unset(QT_QTSQL_INCLUDE_DIR CACHE)
  unset(QT_QTSQL_LIBRARY CACHE)
  unset(QT_QTSQL_LIBRARY_DEBUG CACHE)
  unset(QT_QTSQL_LIBRARY_RELEASE CACHE)
  unset(QT_QTSVG_INCLUDE_DIR CACHE)
  unset(QT_QTSVG_LIBRARY CACHE)
  unset(QT_QTSVG_LIBRARY_DEBUG CACHE)
  unset(QT_QTSVG_LIBRARY_RELEASE CACHE)
  unset(QT_QTTEST_INCLUDE_DIR CACHE)
  unset(QT_QTTEST_LIBRARY CACHE)
  unset(QT_QTTEST_LIBRARY_DEBUG CACHE)
  unset(QT_QTTEST_LIBRARY_RELEASE CACHE)
  unset(QT_QTUITOOLS_INCLUDE_DIR CACHE)
  unset(QT_QTUITOOLS_LIBRARY CACHE)
  unset(QT_QTUITOOLS_LIBRARY_DEBUG CACHE)
  unset(QT_QTUITOOLS_LIBRARY_RELEASE CACHE)
  unset(QT_QTWCODECS_PLUGIN_DEBUG CACHE)
  unset(QT_QTWCODECS_PLUGIN_RELEASE CACHE)
  unset(QT_QTWEBKIT_INCLUDE_DIR CACHE)
  unset(QT_QTWEBKIT_LIBRARY CACHE)
  unset(QT_QTWEBKIT_LIBRARY_DEBUG CACHE)
  unset(QT_QTWEBKIT_LIBRARY_RELEASE CACHE)
  unset(QT_QTXMLPATTERNS_INCLUDE_DIR CACHE)
  unset(QT_QTXMLPATTERNS_LIBRARY CACHE)
  unset(QT_QTXMLPATTERNS_LIBRARY_DEBUG CACHE)
  unset(QT_QTXMLPATTERNS_LIBRARY_RELEASE CACHE)
  unset(QT_QTXML_INCLUDE_DIR CACHE)
  unset(QT_QTXML_LIBRARY CACHE)
  unset(QT_QTXML_LIBRARY_DEBUG CACHE)
  unset(QT_QTXML_LIBRARY_RELEASE CACHE)
  unset(QT_QWEBVIEW_PLUGIN_DEBUG CACHE)
  unset(QT_QWEBVIEW_PLUGIN_RELEASE CACHE)
  unset(QT_QWSTSLIBMOUSEHANDLER_PLUGIN_DEBUG CACHE)
  unset(QT_QWSTSLIBMOUSEHANDLER_PLUGIN_RELEASE CACHE)
  unset(QT_RCC_EXECUTABLE CACHE)
  unset(QT_ROOT CACHE)
  unset(QT_TASKMENUEXTENSION_PLUGIN_DEBUG CACHE)
  unset(QT_TASKMENUEXTENSION_PLUGIN_RELEASE CACHE)
  unset(QT_TRANSLATIONS_DIR CACHE)
  unset(QT_UIC3_EXECUTABLE CACHE)
  unset(QT_UIC_EXECUTABLE CACHE)
  unset(QT_WORLDTIMECLOCKPLUGIN_PLUGIN_DEBUG CACHE)
  unset(QT_WORLDTIMECLOCKPLUGIN_PLUGIN_RELEASE CACHE)
  unset(QT_ROOT CACHE)
  
  unset(QT_QTCORE_LIBRARY CACHE)
  unset(QT_QTGUI_LIBRARY CACHE)
  unset(QT_QTNETWORK_LIBRARY CACHE)
  unset(QT_QTMAIN_LIBRARY CACHE)
  
	set(CMAKE_AUTOMOC ON)
	set(CMAKE_AUTORCC ON)
	set(CMAKE_INCLUDE_CURRENT_DIR ON)
	if(NOT QT_QMAKE_EXECUTABLE)
		find_program(QT_QMAKE_EXECUTABLE NAMES "qmake" "qmake-qt5" "qmake.exe")
	endif()
	if(NOT QT_QMAKE_EXECUTABLE)
		message(FATAL_ERROR "you have to set the path to the Qt5 qmake executable")
	endif()
    message(STATUS "QMake found: path: ${QT_QMAKE_EXECUTABLE}")
    GET_FILENAME_COMPONENT(QT_QMAKE_PATH ${QT_QMAKE_EXECUTABLE} PATH)
    set(QT_ROOT ${QT_QMAKE_PATH}/)
    SET(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} ${QT_QMAKE_PATH}\\..\\lib\\cmake\\Qt5)
    find_package(Qt5 REQUIRED Widgets Network LinguistTools PrintSupport Concurrent Gui)
	if (NOT Qt5_FOUND)
		message(FATAL_ERROR "Qt5Widgets not found. Check your QT_QMAKE_EXECUTABLE path and set it to the correct location")
	endif()
	add_definitions(-DQT5)
	
endmacro(NMC_FINDQT)

macro(NMC_FIND_OPENCV)
  SET(OpenCV_LIBS "")
  if (PKG_CONFIG_FOUND) # not sure: pkgconfig is needed for old linux  with old old opencv systems
    pkg_check_modules(OpenCV  opencv>=2.1.0)
    SET(OpenCV_LIBS ${OpenCV_LIBRARIES})
  endif(PKG_CONFIG_FOUND)
  IF (OpenCV_LIBS STREQUAL "") 
    find_package(OpenCV 2.1.0 REQUIRED core imgproc)
  ENDIF()
  IF (OpenCV_VERSION VERSION_LESS 2.4.0 AND OpenCV_FOUND AND MSVC) # OpenCV didn't allow to define packages before version 2.4.0 ... nomacs was linking against all libs even if they were not compiled -> error
    string(REGEX REPLACE "\\." "" OpenCV_SHORT_VERSION ${OpenCV_VERSION})
    SET(OpenCV_LIBS "debug;opencv_imgproc${OpenCV_SHORT_VERSION}d;optimized;opencv_imgproc${OpenCV_SHORT_VERSION};debug;opencv_core${OpenCV_SHORT_VERSION}d;optimized;opencv_core${OpenCV_SHORT_VERSION};")
  ENDIF()
  IF (NOT OpenCV_FOUND)
    message(FATAL_ERROR "OpenCV not found. It's mandatory when used with ENABLE_RAW enabled") 
  ELSE()
    add_definitions(-DWITH_OPENCV)
  ENDIF()
endmacro(NMC_FIND_OPENCV)

macro(NMC_PREPARE_PLUGIN)
  option(ENABLE_QT5 "Compile with Qt5 (Qt5)" ON)
  
  CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
  if(COMMAND cmake_policy)
        cmake_policy(SET CMP0003 NEW)
      cmake_policy(SET CMP0005 NEW)
  endif(COMMAND cmake_policy)


  MARK_AS_ADVANCED(CMAKE_INSTALL_PREFIX)

  if(NOT NOMACS_VARS_ALREADY_SET) # is set when building nomacs and plugins at the sime time with linux
    find_package(nomacs)
    if(NOT NOMACS_FOUND)
      SET(NOMACS_BUILD_DIRECTORY "NOT_SET" CACHE PATH "Path to the nomacs build directory")
      IF (${NOMACS_BUILD_DIRECTORY} STREQUAL "NOT_SET")
        MESSAGE(FATAL_ERROR "You have to set the nomacs build directory")
      ENDIF()
    endif()
    SET(NOMACS_PLUGIN_INSTALL_DIRECTORY "NOT_SET" CACHE PATH "Path to the plugin install directory for deploying")
  endif(NOT NOMACS_VARS_ALREADY_SET)
  
  if (CMAKE_BUILD_TYPE STREQUAL "debug" OR CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "DEBUG")
      message(STATUS "A debug build. -DDEBUG is defined")
      add_definitions(-DDEBUG)
      ADD_DEFINITIONS(-DQT_NO_DEBUG)
  elseif (NOT MSVC) # debug and release need qt debug outputs on windows
      message(STATUS "A release build (non-debug). Debugging outputs are silently ignored.")
      add_definitions(-DQT_NO_DEBUG_OUTPUT)
  endif ()
endmacro(NMC_PREPARE_PLUGIN)

# you can use this NMC_CREATE_TARGETS("myAdditionalDll1.dll" "myAdditionalDll2.dll")
macro(NMC_CREATE_TARGETS)
  set(ADDITIONAL_DLLS ${ARGN})
  list(LENGTH ADDITIONAL_DLLS NUM_ADDITONAL_DLLS) 
  if( ${NUM_ADDITONAL_DLLS} GREATER 0) 
    foreach(DLL ${ADDITIONAL_DLLS})
      message(STATUS "extra_macro_args: ${DLL}")
    endforeach()
  endif()
  
  
IF (MSVC)
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E make_directory ${NOMACS_BUILD_DIRECTORY}/$<CONFIGURATION>/plugins/)
	add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy $<TARGET_FILE:${PROJECT_NAME}> ${NOMACS_BUILD_DIRECTORY}/$<CONFIGURATION>/plugins/)
  if(${NUM_ADDITONAL_DLLS} GREATER 0) 
    foreach(DLL ${ADDITIONAL_DLLS})
      add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/bin/${DLL} ${NOMACS_BUILD_DIRECTORY}/$<CONFIGURATION>/plugins/)
    endforeach()
  endif()
  
	# write dll to d.txt (used for automated plugin download)
	if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/d.txt)
		file(READ ${CMAKE_CURRENT_SOURCE_DIR}/d.txt fileContent)	
		if(CMAKE_CL_64)
			string (REGEX MATCHALL "x64" matches ${fileContent})
			if(NOT matches)
				file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x64 x64/${PROJECT_NAME}.dll\n")
        if(${NUM_ADDITONAL_DLLS} GREATER 0) 
          foreach(DLL ${ADDITIONAL_DLLS})
            file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x64 x64/${DLL}\n")        
          endforeach()
        endif()
			endif()
		else()
			string (REGEX MATCHALL "x86" matches ${fileContent})		
			if(NOT matches)
				file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x86 x86/${PROJECT_NAME}.dll\n")
        if(${NUM_ADDITONAL_DLLS} GREATER 0) 
          foreach(DLL ${ADDITIONAL_DLLS})
            file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x86 x86/${DLL}\n")        
          endforeach()
        endif()
			endif()	
		endif(CMAKE_CL_64)
	else()
		if(CMAKE_CL_64)
      file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x64 x64/${PROJECT_NAME}.dll\n")
      if(${NUM_ADDITONAL_DLLS} GREATER 0) 
        foreach(DLL ${ADDITIONAL_DLLS})
          file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x64 x64/${DLL}\n")        
        endforeach()
      endif()

		else()
			file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x86 x86/${PROJECT_NAME}.dll\n")
      if(${NUM_ADDITONAL_DLLS} GREATER 0) 
        foreach(DLL ${ADDITIONAL_DLLS})
          file(APPEND ${CMAKE_CURRENT_SOURCE_DIR}/d.txt "x86 x86/${DLL}\n")        
        endforeach()
      endif()      
		endif()	
	endif()
	install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Release/${PROJECT_NAME}.dll DESTINATION ${NOMACS_PLUGIN_INSTALL_DIRECTORY}/${PLUGIN_ID}/${PLUGIN_VERSION}/${PLUGIN_ARCHITECTURE}/ CONFIGURATIONS Release)
	install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/d.txt DESTINATION ${NOMACS_PLUGIN_INSTALL_DIRECTORY}/${PLUGIN_ID}/${PLUGIN_VERSION}/ CONFIGURATIONS Release)
  if(${NUM_ADDITONAL_DLLS} GREATER 0) 
    foreach(DLL ${ADDITIONAL_DLLS})
      install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/bin/${DLL} DESTINATION ${NOMACS_PLUGIN_INSTALL_DIRECTORY}/${PLUGIN_ID}/${PLUGIN_VERSION}/${PLUGIN_ARCHITECTURE}/ CONFIGURATIONS Release)
    endforeach()
  endif()      
    
elseif(UNIX)
	install(TARGETS ${PROJECT_NAME} RUNTIME LIBRARY DESTINATION lib/nomacs-plugins)
endif(MSVC)
endmacro(NMC_CREATE_TARGETS)

macro (NMC_EXIV_INCLUDES)

find_path(EXIV2_INCLUDE_DIRS "exiv2/exiv2.hpp" 
				PATHS "../exiv2-0.25/include" 
				DOC "Path to exiv2/exiv2.hpp" NO_DEFAULT_PATH)
MARK_AS_ADVANCED(EXIV2_INCLUDE_DIRS)

endmacro (NMC_EXIV_INCLUDES)

